[project]
name = "example-project"
version = "0.0.1"
description = "This is a template repository for Python projects that use uv for their dependency management."
authors = [
  { name = "RYZHAIEV-SERHII", email = "rsp89.we@gmail.com" },
]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.10,<4.0"
classifiers = [
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://RYZHAIEV-SERHII.github.io/example-project/"
Repository = "https://github.com/RYZHAIEV-SERHII/example-project"
Documentation = "https://RYZHAIEV-SERHII.github.io/example-project/"

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pre-commit>=4.1.0",
    "tox-uv>=1.25.0",
    "deptry>=0.23.0",
    "mypy>=1.15.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.9.10",
    "mkdocs>=1.4.2",
    "mkdocs-material>=9.6.7",
    "mkdocs-github-admonitions-plugin>=0.0.3",
    "mkdocstrings[python]>=0.29.0",
]

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["example_project"]

[tool.ruff]
target-version = "py310"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
  # flake8-2020
  "YTT",
  # flake8-bandit
  "S",
  # flake8-bugbear
  "B",
  # flake8-builtins
  "A",
  # flake8-comprehensions
  "C4",
  # flake8-debugger
  "T10",
  # flake8-simplify
  "SIM",
  # isort
  "I",
  # mccabe
  "C90",
  # pycodestyle
  "E",
  "W",
  # pyflakes
  "F",
  # pygrep-hooks
  "PGH",
  # pyupgrade
  "UP",
  # ruff
  "RUF",
  # tryceratops
  "TRY",
  # Pylint-equivalent rules
  "PLC",
  "PLE",
  "PLR",
  "PLW",
]
ignore = [
  # LineTooLong
  "E501",
  # DoNotAssignLambda
  "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.mypy]
files = ["example_project"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
minversion = "8.0"                 # Minimum pytest version
addopts = "-ra -q --strict-markers --cov-report=term-missing"  # Pytest run options
testpaths = ["tests"]              # Test directories
pythonpath = ["."]                 # Python module import paths
markers = [
    "unit: mark a test as a unit test",
    "integration: mark a test as an integration test",
]

[tool.coverage.run]
branch = true
source = ["example_project"]

[tool.coverage.report]
skip_empty = true

exclude_lines = [                  # Line patterns to exclude from analysis
    "pragma: no cover",            # Lines with 'no cover' directive
    "def __repr__",                # Repr methods
    "if self.debug:",              # Debugging code
    "raise NotImplementedError",   # Stubs for unimplemented methods
    "if __name__ == .__main__.:",  # Blocks executed on direct run
    "pass",                        # Empty blocks
    "raise ImportError",           # Import error handling
]
ignore_errors = true               # Ignore errors during report generation
omit = [                           # Files to exclude from analysis
    "tests/*",                     # Tests
    "setup.py",                    # Setup file
    "config.py",                   # Configuration file
]


[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist = true
envlist = py310, py311, py312, py313

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[testenv]
passenv = PYTHON_VERSION
allowlist_externals = uv
commands =
    uv sync --python {envpython}
    uv run python -m pytest --doctest-modules tests --cov --cov-config=pyproject.toml --cov-report=xml
    mypy
"""
